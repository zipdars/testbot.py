import logging
from math import ceil
import datetime
import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram import ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
import psycopg2
import asyncio
import asyncpg
from psycopg2 import sql
from psycopg2.extras import DictCursor
from telegram.constants import ParseMode
import re
from datetime import date, datetime

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
INIT, WAITING_INPUT, ADDITIONAL_CHANNELS, CHANNELS_INPUT, CONFIRMATION, FINISH_CONTEST, WAITING_FOR_TRACKED_DATE, WAITING_FOR_PENDING_DOP_CHANNELS, START, AWAITING_DATE, END, WAITING_FOR_PENDING_DATE = range(12)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PARAMS = {
    "database": "Telegram",
    "user": "postgres",
    "password": "1",
    "host": "localhost",
    "port": "5432"
}

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_USERS = [1]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

async def error_handler(update, context):
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = ''.join(tb_list)

    # Build the message with the traceback
    update_str = update.to_dict() if isinstance(update, Update) else str(update)
    message = (
        f'An exception was raised while handling an update\n'
        f'<pre>update = {html.escape(json.dumps(update_str, indent=2, ensure_ascii=False))}'
        '</pre>\n\n'
        f'<pre>{html.escape(tb_string)}</pre>'
    )

    # Finally, send the message
    await context.bot.send_message(chat_id=chat_id, text=message, parse_mode=ParseMode.HTML)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–æ–π
def is_url(text):
    url_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')
    return bool(url_pattern.match(text))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –¥–∞—Ç–æ–π
def is_date(text):
    date_pattern = re.compile(r'^\d{2}\.\d{2}$')
    return bool(date_pattern.match(text))

async def check_admin_status(user_id, context):
    if 'is_admin' not in context.user_data:
        context.user_data['is_admin'] = user_id in ADMIN_USERS
    return context.user_data['is_admin']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ asyncpg
async def get_asyncpg_connection():
    return await asyncpg.connect(
        database=DB_PARAMS["database"],
        user=DB_PARAMS["user"],
        password=DB_PARAMS["password"],
        host=DB_PARAMS["host"],
        port=DB_PARAMS["port"]
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return psycopg2.connect(**DB_PARAMS)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
async def execute_query(query, params=None):
    conn = await asyncpg.connect(**DB_PARAMS)
    try:
        if params:
            result = await conn.fetch(query, *params)
        else:
            result = await conn.fetch(query)
        return result
    except Exception as e:
        logging.error(f"Error executing query: {query}")
        logging.error(f"With params: {params}")
        logging.error(f"Error details: {e}", exc_info=True)
        raise
    finally:
        await conn.close()

async def add_contest_to_db(link, date, dop_channels, status='–ê–∫—Ç–∏–≤–µ–Ω'):
    query = """
        INSERT INTO contests.contests (link, date, dop_channels, status)
        VALUES ($1, $2, $3, $4)
    """
    await execute_query(query, (link, date, dop_channels, status))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(is_admin=False):
    keyboard = [
        [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–Ω–∫—É—Ä—Å—ã")],
    ]
    if is_admin:
        keyboard.append([KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –ë–î")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def add_admin_buttons(keyboard, is_admin):
    if is_admin:
        keyboard.append([InlineKeyboardButton("üì• –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∫–æ–Ω–∫—É—Ä—Å—ã", callback_data='show_pending_contests')])
    return keyboard

async def handle_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_text = update.message.text

    if is_date(date_text):
        context.user_data['date'] = process_date(date_text)
        return await ask_for_missing_info(update, context)
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.")
        return WAITING_INPUT

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞
async def finish_contest_request(update, context):
    if update.effective_user.id not in ADMIN_USERS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤.")
        return WAITING_INPUT

    keyboard = [
        [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=reply_markup
    )
    return FINISH_CONTEST


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—É—Ä—Å–∞
async def update_contest_status(update, context):
    if update.effective_user.id not in ADMIN_USERS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤.")
        return WAITING_INPUT

    text = update.message.text

    if text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=get_main_keyboard()
        )
        return WAITING_INPUT

    if not is_url(text):
        await update.message.reply_text(
            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'."
        )
        return FINISH_CONTEST

    query = """
        UPDATE contests.contests
        SET status = '–ó–∞–≤–µ—Ä—à–µ–Ω'
        WHERE link = \$1
        RETURNING *
    """

    result = await execute_query(query, (text,))

    if result:
        await update.message.reply_text(
            f"–°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—É—Ä—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–ó–∞–≤–µ—Ä—à–µ–Ω'.",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "–ö–æ–Ω–∫—É—Ä—Å —Å —Ç–∞–∫–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_main_keyboard()
        )

    return WAITING_INPUT

async def handle_menu_input(update, context):
    text = update.message.text
    if text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å":
        if update.effective_user.id in ADMIN_USERS:
            context.user_data.clear()
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –∏–ª–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú")
            return WAITING_INPUT
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤.")
            return WAITING_INPUT
    elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å—ã":
        await show_contests(update, context)
        return WAITING_INPUT
    elif text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å":
        return await finish_contest_request(update, context)
    elif text == "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ":
        return await show_tracked_contests(update, context)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
        return WAITING_INPUT

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_admin = user_id in ADMIN_USERS
    context.user_data['is_admin'] = is_admin

    await show_contests(update, context)
    return WAITING_INPUT


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def link_exists(link):
    query = "SELECT EXISTS(SELECT 1 FROM contests.contests WHERE link = \$1) AS exists"
    try:
        result = await execute_query(query, (link,))
        if result and len(result) > 0:
            return result[0]['exists']
        return False
    except Exception as e:
        logging.error(f"Error in link_exists: {e}", exc_info=True)
        return False

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_success_message(update, context)
    await delete_cancel_message(update, context)

    text = update.message.text

    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if 'welcome_message_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['welcome_message_id']
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        del context.user_data['welcome_message_id']

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if context.user_data.get('waiting_for_pending_date'):
        return await handle_pending_date_input(update, context)
    elif context.user_data.get('waiting_for_pending_dop_channels'):
        return await handle_pending_dop_channels_input(update, context)
    elif context.user_data.get('waiting_for_tracked_date'):
        return await handle_tracked_date_input(update, context)
    elif context.user_data.get('waiting_for_date'):
        return await handle_date_input(update, context)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    if not context.user_data.get('waiting_for_pending_dop_channels'):
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ URL
    if is_url(text):
        return await handle_url_input(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–Ω–∫—É—Ä—Å—ã":
        await show_contests(update, context)
        return WAITING_INPUT
    elif text == "–û–±–Ω–æ–≤–∏—Ç—å":
        await refresh_contests(update, context)
        return WAITING_INPUT
    elif text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å":
        return await finish_contest_request(update, context)

    # –ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    else:
        await update_or_send_message(
            update, context,
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å, –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
            reply_markup=None
        )
        return WAITING_INPUT

# –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã, –∫–∞–Ω–∞–ª–æ–≤ –∏ —Ç.–¥.
async def update_or_send_message(update, context, text, reply_markup=None):
    if 'message_id' in context.user_data:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['message_id'],
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
            context.user_data['message_id'] = message.message_id
    else:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        context.user_data['message_id'] = message.message_id

async def handle_url_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_cancel_message(update, context)

    url = update.message.text
    context.user_data['link'] = url

    logging.info(f"Handling URL input: {url}")

    keyboard = []
    try:
        exists = await link_exists(url)
        logging.info(f"Link exists: {exists}")
        if exists:
            if context.user_data.get('is_admin', False):
                keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å", callback_data='finish_contest')])
    except Exception as e:
        logging.error(f"Error checking if link exists: {e}", exc_info=True)

    keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å", callback_data='add_contest')])
    keyboard.append([InlineKeyboardButton("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", callback_data='track_contest')])
    if context.user_data.get('is_admin', False):
        keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ", callback_data='add_to_pending')])
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    message = await update.message.reply_text(
        f"–°—Å—ã–ª–∫–∞: {url}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=reply_markup,
        disable_web_page_preview=True
    )
    context.user_data['message_id'] = message.message_id

    return WAITING_INPUT

async def handle_url_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_success_message(update, context)
    query = update.callback_query
    await query.answer()

    try:
        if query.data == 'add_to_pending':
            if update.effective_user.id in ADMIN_USERS:
                context.user_data['waiting_for_pending_date'] = True
                await query.edit_message_text(
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –¥–ª—è —Å—Å—ã–ª–∫–∏:\n{context.user_data['link']}",
                    disable_web_page_preview=True
                )
            else:
                await query.edit_message_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î.")
            return WAITING_INPUT

        elif query.data == 'finish_contest':
            if update.effective_user.id in ADMIN_USERS:
                await finish_contest(update, context)
            else:
                await query.edit_message_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤.")
            return WAITING_INPUT

        elif query.data == 'add_contest':
            if update.effective_user.id in ADMIN_USERS:
                context.user_data['waiting_for_date'] = True
                await query.edit_message_text(
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –¥–ª—è —Å—Å—ã–ª–∫–∏:\n{context.user_data['link']}",
                    disable_web_page_preview=True
                )
            else:
                await query.edit_message_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤.")
            return WAITING_INPUT

        elif query.data == 'track_contest':
            context.user_data['tracked_link'] = context.user_data['link']
            context.user_data['waiting_for_tracked_date'] = True
            await query.edit_message_text(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –¥–ª—è —Å—Å—ã–ª–∫–∏:\n{context.user_data['link']}",
                disable_web_page_preview=True
            )
            return WAITING_INPUT

        elif query.data == 'cancel':
            await show_contests(update, context)
            return WAITING_INPUT

        else:
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {query.data}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return WAITING_INPUT

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_url_action: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return WAITING_INPUT

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤
async def show_tracked_contests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    tracked_contests = await get_tracked_contests(user_id)

    if not tracked_contests:
        message = "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤."
    else:
        message = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã:\n\n"
        for contest in tracked_contests:
            link = contest.get('link', '–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            date = contest.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            message += f"<a href='{link}'>{link}</a>\n–î–∞—Ç–∞: {date}\n\n"

    keyboard = [
        [InlineKeyboardButton("üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='show_active'),
         InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data='show_completed'),
         InlineKeyboardButton("üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", callback_data='show_tracked')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh_tracked')]
    ]

    is_admin = user_id in ADMIN_USERS
    keyboard = add_admin_buttons(keyboard, is_admin)

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )

    return WAITING_INPUT


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ
async def add_tracked_contest(update, context):
    user_id = update.effective_user.id
    link = context.user_data.get('tracked_link')

    message_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú:"

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text=message_text,
            disable_web_page_preview=True
        )
    else:
        await update.message.reply_text(
            text=message_text,
            disable_web_page_preview=True
        )

    return WAITING_FOR_TRACKED_DATE


async def handle_tracked_date_input(update, context):
    date_text = update.message.text
    if is_date(date_text):
        date = process_date(date_text)
        user_id = update.effective_user.id
        link = context.user_data.get('tracked_link')

        if not link:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.")
            return WAITING_INPUT

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—É—Ä—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_tracked_contest_to_db(user_id, link, date)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if 'tracking_message_id' in context.user_data:
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['tracking_message_id'],
                    text=f"–ö–æ–Ω–∫—É—Ä—Å {link} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å –¥–∞—Ç–æ–π {date}.",
                    disable_web_page_preview=True
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await update.message.reply_text(f"–ö–æ–Ω–∫—É—Ä—Å {link} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å –¥–∞—Ç–æ–π {date}.")
        else:
            # –ï—Å–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(f"–ö–æ–Ω–∫—É—Ä—Å {link} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å –¥–∞—Ç–æ–π {date}.",
            disable_web_page_preview=True)

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
        await show_contests(update, context)

        return WAITING_INPUT
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.")
        return WAITING_FOR_TRACKED_DATE

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def add_tracked_contest_to_db(user_id, link, date):
    query = """
        INSERT INTO contests.tracked_contests (user_id, link, date)
        VALUES ($1, $2, $3)
        ON CONFLICT (user_id, link) DO UPDATE
        SET date = EXCLUDED.date
    """
    await execute_query(query, (user_id, link, date))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_tracked_contests(user_id):
    query = """
        SELECT link, date FROM contests.tracked_contests
        WHERE user_id = $1
    """
    return await execute_query(query, (user_id,))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
async def remove_tracked_contest(user_id, link):
    query = """
        DELETE FROM contests.tracked_contests
        WHERE user_id = $1 AND link = $2
    """
    await execute_query(query, (user_id, link))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
async def delete_tracked_contest(update, context):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    tracked_contests = await get_tracked_contests(user_id)  # –î–æ–±–∞–≤–ª–µ–Ω await

    if not tracked_contests:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤.")
        return WAITING_INPUT

    keyboard = []
    for i, contest in enumerate(tracked_contests, 1):
        keyboard.append([InlineKeyboardButton(f"{i}. {contest['link']} - {contest['date']}", callback_data=f'delete_{i}')])

    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_delete')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    return WAITING_INPUT

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
async def handle_delete_tracked(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'cancel_delete':
        await show_tracked_contests(update, context)
        return WAITING_INPUT

    index = int(query.data.split('_')[1]) - 1
    user_id = update.effective_user.id
    tracked_contests = await get_tracked_contests(user_id)  # –î–æ–±–∞–≤–ª–µ–Ω await

    if 0 <= index < len(tracked_contests):
        link_to_delete = tracked_contests[index]['link']
        await remove_tracked_contest(user_id, link_to_delete)  # –î–æ–±–∞–≤–ª–µ–Ω await

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        updated_tracked_contests = await get_tracked_contests(user_id)  # –î–æ–±–∞–≤–ª–µ–Ω await

        if not updated_tracked_contests:
            message = "–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤."
        else:
            message = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã:\n\n"
            for i, contest in enumerate(updated_tracked_contests, 1):
                message += f"{i}. {contest['link']} - {contest['date']}\n"

        keyboard = [
            [InlineKeyboardButton("üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='show_active'),
             InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data='show_completed'),
             InlineKeyboardButton("üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", callback_data='show_tracked')],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='add_tracked'),
             InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data='delete_tracked')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
    else:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    return WAITING_INPUT

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
async def add_new_tracked_contest(update, context):
    query = update.callback_query
    await query.answer()

    message = await query.edit_message_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞:\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å.",
        disable_web_page_preview=True
    )
    context.user_data['tracking_message_id'] = message.message_id
    context.user_data['waiting_for_tracked_link'] = True
    return WAITING_INPUT


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
async def handle_tracked_link_input(update, context):
    if 'waiting_for_tracked_link' in context.user_data:
        del context.user_data['waiting_for_tracked_link']
        link = update.message.text

        if is_url(link):
            context.user_data['tracked_link'] = link
            await update.message.delete()
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['tracking_message_id'],
                text=f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞:\n\n"
                     f"–°—Å—ã–ª–∫–∞: {link}\n\n"
                     f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú:",
                disable_web_page_preview=True
            )
            return WAITING_FOR_TRACKED_DATE
        else:
            await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return WAITING_INPUT

    return await handle_input(update, context)

async def finish_contest(update, context):
    await delete_success_message(update, context)
    query = update.callback_query
    await query.answer()

    link = context.user_data.get('link')
    if not link:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return WAITING_INPUT

    update_query = """
        UPDATE contests.contests
        SET status = '–ó–∞–≤–µ—Ä—à–µ–Ω'
        WHERE link = $1
        RETURNING *
    """
    result = await execute_query(update_query, (link,))  # Corrected placeholder usage

    if result:
        message = f"–ö–æ–Ω–∫—É—Ä—Å –ø–æ —Å—Å—ã–ª–∫–µ {link} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
    else:
        message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å –ø–æ —Å—Å—ã–ª–∫–µ {link}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–Ω–∫—É—Ä—Å—ã", callback_data='show_all_contests')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        disable_web_page_preview=True
    )

    context.user_data.clear()
    return WAITING_INPUT

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
def process_date(date_text):
    current_year = datetime.now().year
    date = datetime.strptime(f"{date_text}.{current_year}", "%d.%m.%Y")
    return date.strftime("%d.%m.%Y")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def ask_for_missing_info(update, context):
    if 'waiting_for_date' in context.user_data:
        new_text = f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞:\n\n–°—Å—ã–ª–∫–∞: {context.user_data['link']}\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú"
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['message_id'],
                text=new_text,
                disable_web_page_preview=True
            )
        except telegram.error.BadRequest as e:
            if "Message is not modified" not in str(e):
                raise e
        del context.user_data['waiting_for_date']
    elif 'date' in context.user_data:
        keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data='yes'),
             InlineKeyboardButton("–ù–µ—Ç", callback_data='no')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        new_text = f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞:\n\n–°—Å—ã–ª–∫–∞: {context.user_data['link']}\n–î–∞—Ç–∞: {context.user_data['date']}\n\n–ù—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–æ–ø. –∫–∞–Ω–∞–ª—ã?"
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['message_id'],
                text=new_text,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
        except telegram.error.BadRequest as e:
            if "Message is not modified" not in str(e):
                raise e
        return ADDITIONAL_CHANNELS
    return WAITING_INPUT


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
async def additional_channels(update, context):
    await delete_success_message(update, context)
    try:
        query = update.callback_query
        await query.answer()

        if query.data == 'refresh_contests':
            return await refresh_contests(update, context)
        elif query.data == 'yes':
            await context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                text=f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞:\n\n–°—Å—ã–ª–∫–∞: {context.user_data['link']}\n–î–∞—Ç–∞: {context.user_data['date']}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–ø. –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."
            )
            context.user_data['waiting_for_dop_channels'] = True
            return CHANNELS_INPUT
        elif query.data == 'no':
            context.user_data['dop_channels'] = 'false'
            return await show_confirmation(update, context)
        else:
            logger.error(f"Unexpected callback data: {query.data}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return WAITING_INPUT
    except Exception as e:
        logger.error(f"Error in additional_channels: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return WAITING_INPUT


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
async def channels_input(update, context):
    await delete_success_message(update, context)
    text = update.message.text

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)

    if text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–Ω–∫—É—Ä—Å—ã":
        await show_contests(update, context)
        return WAITING_INPUT
    elif text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å":
        context.user_data.clear()
        message = await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞:\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å.")
        context.user_data['message_id'] = message.message_id
        return WAITING_INPUT

    if context.user_data.get('waiting_for_dop_channels'):
        context.user_data['dop_channels'] = text
        del context.user_data['waiting_for_dop_channels']

    return await show_confirmation(update, context)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def show_confirmation(update, context):
    data = context.user_data
    dop_channels_display = data.get('dop_channels', 'false')
    confirmation_text = f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞:\n\n–°—Å—ã–ª–∫–∞: {data['link']}\n–î–∞—Ç–∞: {data['date']}\n–î–æ–ø. –∫–∞–Ω–∞–ª—ã: {dop_channels_display}\n\n–î–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –≤–µ—Ä–Ω—ã?"
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data='confirm'),
         InlineKeyboardButton("–ù–µ—Ç", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data['message_id'],
            text=confirmation_text,
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
    elif update.callback_query:
        message = await update.callback_query.edit_message_text(
            text=confirmation_text,
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
    else:
        logger.error("Unexpected update type in show_confirmation")
        return WAITING_INPUT

    context.user_data['confirmation_message_id'] = message.message_id
    return CONFIRMATION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def confirmation(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'confirm':
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
        insert_query = """
            INSERT INTO contests.contests (link, date, dop_channels, status)
            VALUES ($1, $2, $3, $4)
        """
        await execute_query(insert_query, (
            context.user_data['link'],
            context.user_data['date'],
            context.user_data.get('dop_channels', 'false'),
            '–ê–∫—Ç–∏–≤–µ–Ω'
        ))
        message = await query.edit_message_text(
            "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
            disable_web_page_preview=True
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        context.user_data['success_message_id'] = message.message_id
    elif query.data == 'cancel':
        keyboard = [
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–Ω–∫—É—Ä—Å—ã", callback_data='show_all_contests')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=reply_markup
        )
    else:
        logger.error(f"Unexpected callback data: {query.data}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    context.user_data.clear()
    return WAITING_INPUT


async def delete_message_after_delay(bot, chat_id, message_id, delay):
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

async def delete_cancel_message(update, context):
    if 'cancel_message_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['cancel_message_id']
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ: {e}")
        del context.user_data['cancel_message_id']

async def delete_success_message(update, context):
    if 'success_message_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['success_message_id']
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        del context.user_data['success_message_id']


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω–∫—É—Ä—Å–æ–≤
async def get_contests_message(status='–ê–∫—Ç–∏–≤–µ–Ω', is_admin=False):
    today = date.today()
    if status == '–ê–∫—Ç–∏–≤–µ–Ω':
        query = """
            SELECT c.link, c.date, c.status, COUNT(DISTINCT h.id) as participant_count
            FROM contests.contests c
            LEFT JOIN history.history h ON c.link = h.link
            WHERE c.status = $1
            GROUP BY c.link, c.date, c.status
            ORDER BY c.date::date
        """
        params = [status]
    else:
        query = """
            SELECT c.link, c.date, c.status, COUNT(DISTINCT h.id) as participant_count
            FROM contests.contests c
            LEFT JOIN history.history h ON c.link = h.link
            WHERE c.status = $1 AND DATE(c.date) = $2
            GROUP BY c.link, c.date, c.status
            ORDER BY c.date::date
        """
        params = [status, today]

    conn = await asyncpg.connect(**DB_PARAMS)
    try:
        contests = await conn.fetch(query, *params)
    finally:
        await conn.close()

    return contests if contests else []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤
async def show_contests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_success_message(update, context)
    await delete_cancel_message(update, context)

    is_admin = context.user_data.get('is_admin', False)
    contests = await get_contests_message('–ê–∫—Ç–∏–≤–µ–Ω', is_admin)

    if not contests:
        message = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤."
        if update.callback_query:
            await update.callback_query.edit_message_text(message)
        elif update.message:
            await update.message.reply_text(message)
        return WAITING_INPUT

    page = 1
    contests_per_page = 5
    total_pages = ceil(len(contests) / contests_per_page)

    message = await get_paginated_contests(contests, page, contests_per_page, is_admin)

    update_time = datetime.now().strftime("%d.%m %H:%M")
    message = f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã:\n\n{message}\n\n–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {update_time}"

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'page_–ê–∫—Ç–∏–≤–µ–Ω_{page - 1}'),
         InlineKeyboardButton(f"{page}/{total_pages}", callback_data='current_page'),
         InlineKeyboardButton("‚û°Ô∏è", callback_data=f'page_–ê–∫—Ç–∏–≤–µ–Ω_{page + 1}')],
        [InlineKeyboardButton("üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='show_active'),
         InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data='show_completed'),
         InlineKeyboardButton("üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", callback_data='show_tracked')]
    ]

    if is_admin:
        keyboard.append([InlineKeyboardButton("üì• –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∫–æ–Ω–∫—É—Ä—Å—ã", callback_data='show_pending_contests')])

    keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh_–ê–∫—Ç–∏–≤–µ–Ω')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=message,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
            reply_markup=reply_markup
        )
    elif update.message:
        await update.message.reply_text(
            message,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
            reply_markup=reply_markup
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
            reply_markup=reply_markup
        )

    context.user_data['contests'] = contests
    context.user_data['total_pages'] = total_pages
    context.user_data['current_status'] = '–ê–∫—Ç–∏–≤–µ–Ω'

    return WAITING_INPUT


# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def get_paginated_contests(contests, page, contests_per_page, is_admin):
    start = (page - 1) * contests_per_page
    end = start + contests_per_page

    paginated_contests = contests[start:end]

    message = ""
    for contest in paginated_contests:
        message += f"–î–∞—Ç–∞: {contest['date']}\n"
        message += f"–°—Å—ã–ª–∫–∞: <a href=\"{contest['link']}\">{contest['link']}</a>\n"
        if is_admin:
            message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {contest.get('participant_count', '–ù/–î')}\n"
        message += "\n"

    return message

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def handle_pagination(update, context):
    await delete_success_message(update, context)
    query = update.callback_query
    await query.answer()

    if query.data == 'current_page':
        return

    page = int(query.data.split('_')[1])
    await update_contests_page(update, context, page)


async def update_contests_page(update, context, page, status='–ê–∫—Ç–∏–≤–µ–Ω'):
    is_admin = await check_admin_status(update.effective_user.id, context)

    contests = await get_contests_message(status, is_admin)

    if not contests:
        message = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤." if status == '–ê–∫—Ç–∏–≤–µ–Ω' else "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤."
        keyboard = [
            [InlineKeyboardButton("üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='show_active'),
             InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data='show_completed'),
             InlineKeyboardButton("üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", callback_data='show_tracked')],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f'refresh_{status}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text=message, reply_markup=reply_markup)
        return WAITING_INPUT

    contests_per_page = 5
    total_pages = ceil(len(contests) / contests_per_page)

    page = max(1, min(page, total_pages))

    message = await get_paginated_contests(contests, page, contests_per_page, is_admin)

    update_time = datetime.now().strftime("%d.%m %H:%M")
    status_text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã" if status == '–ê–∫—Ç–∏–≤–µ–Ω' else "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    message = f"{status_text}:\n\n{message}\n\n–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {update_time}"

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'page_{status}_{page - 1}'),
         InlineKeyboardButton(f"{page}/{total_pages}", callback_data='current_page'),
         InlineKeyboardButton("‚û°Ô∏è", callback_data=f'page_{status}_{page + 1}')],
        [InlineKeyboardButton("üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='show_active'),
         InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data='show_completed'),
         InlineKeyboardButton("üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", callback_data='show_tracked')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f'refresh_{status}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await update.callback_query.edit_message_text(
            text=message,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
            reply_markup=reply_markup
        )
    except telegram.error.BadRequest as e:
        if "Message is not modified" not in str(e):
            raise e

    context.user_data['contests'] = contests
    context.user_data['total_pages'] = total_pages
    context.user_data['current_status'] = status

async def handle_pagination(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'current_page':
        return

    status, page = query.data.split('_')[1:]
    page = int(page)

    await update_contests_page(update, context, page, status)


# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
async def refresh_contests(update, context):
    await delete_success_message(update, context)
    query = update.callback_query
    await query.answer()

    status = query.data.split('_')[1]
    current_page = 1
    for button in query.message.reply_markup.inline_keyboard[0]:
        if button.callback_data == 'current_page':
            current_page = int(button.text.split('/')[0])
            break

    is_admin = update.effective_user.id in ADMIN_USERS
    context.user_data['is_admin'] = is_admin  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞

    await update_contests_page(update, context, current_page, status)

async def switch_contest_type(update, context):
    await delete_success_message(update, context)
    query = update.callback_query
    await query.answer()

    if query.data == 'show_active':
        status = '–ê–∫—Ç–∏–≤–µ–Ω'
    elif query.data == 'show_completed':
        status = '–ó–∞–≤–µ—Ä—à–µ–Ω'
    elif query.data == 'show_tracked':
        return await show_tracked_contests(update, context)
    else:
        status = '–ê–∫—Ç–∏–≤–µ–Ω'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ
    if 'tracked_added_message_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['tracked_added_message_id']
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ: {e}")
        del context.user_data['tracked_added_message_id']

    is_admin = update.effective_user.id in ADMIN_USERS
    context.user_data['is_admin'] = is_admin  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞

    await update_contests_page(update, context, 1, status)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É pending_contests
async def add_to_pending_contests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    link = context.user_data['link']

    await update_or_send_message(
        update, context,
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö:\n\n–°—Å—ã–ª–∫–∞: {link}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú"
    )
    context.user_data['waiting_for_pending_date'] = True
    return WAITING_FOR_PENDING_DATE


async def handle_pending_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_text = update.message.text

    if is_date(date_text):
        context.user_data['pending_contest'] = {
            'link': context.user_data['link'],
            'date': process_date(date_text)
        }
        await update.message.delete()
        return await ask_for_pending_dop_channels(update, context)
    else:
        await update_or_send_message(
            update, context,
            f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö:\n\n–°—Å—ã–ª–∫–∞: {context.user_data['link']}\n\n–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú."
        )
        await update.message.delete()
        return WAITING_FOR_PENDING_DATE


async def ask_for_pending_dop_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data='pending_yes'),
         InlineKeyboardButton("–ù–µ—Ç", callback_data='pending_no')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = (f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö:\n\n"
                    f"–°—Å—ã–ª–∫–∞: {context.user_data['pending_contest']['link']}\n"
                    f"–î–∞—Ç–∞: {context.user_data['pending_contest']['date']}\n\n"
                    f"–ù—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–æ–ø. –∫–∞–Ω–∞–ª—ã?")

    await update_or_send_message(update, context, message_text, reply_markup)
    return WAITING_INPUT

async def handle_pending_dop_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'pending_yes':
        context.user_data['waiting_for_pending_dop_channels'] = True
        await update_or_send_message(
            update, context,
            f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö:\n\n"
            f"–°—Å—ã–ª–∫–∞: {context.user_data['pending_contest']['link']}\n"
            f"–î–∞—Ç–∞: {context.user_data['pending_contest']['date']}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–ø. –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."
        )
        return WAITING_FOR_PENDING_DOP_CHANNELS
    elif query.data == 'pending_no':
        context.user_data['pending_contest']['dop_channels'] = False
        return await save_pending_contest(update, context)


async def handle_pending_dop_channels_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dop_channels = update.message.text.strip()

    if dop_channels:
        context.user_data['pending_contest']['dop_channels'] = dop_channels
    else:
        context.user_data['pending_contest']['dop_channels'] = False

    del context.user_data['waiting_for_pending_dop_channels']

    await update.message.delete()
    return await save_pending_contest(update, context)



async def save_pending_contest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    pending_contest = user_data.get('pending_contest', {})

    logging.info(f"Attempting to save pending contest: {pending_contest}")

    if 'link' in pending_contest and 'date' in pending_contest and not user_data.get('contest_saved', False):
        query = "INSERT INTO contests.pending_contests (link, date, dop_channels) VALUES ($1, $2, $3)"

        dop_channels = pending_contest.get('dop_channels', 'false')
        if isinstance(dop_channels, str):
            dop_channels = dop_channels.strip()
            if dop_channels.lower() == 'false':
                dop_channels = False

        params = [
            pending_contest['link'],
            pending_contest['date'],
            dop_channels
        ]

        logging.info(f"SQL Query: {query}")
        logging.info(f"Params: {params}")

        try:
            await execute_query(query, params)

            success_message = (
                "–ö–æ–Ω–∫—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö:\n\n"
                f"–°—Å—ã–ª–∫–∞: {pending_contest['link']}\n"
                f"–î–∞—Ç–∞: {pending_contest['date']}\n"
                f"–î–æ–ø. –∫–∞–Ω–∞–ª—ã: {dop_channels if dop_channels else '–ù–µ—Ç'}\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
            )

            await update_or_send_message(update, context, success_message)

            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∫–æ–Ω–∫—É—Ä—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            user_data['contest_saved'] = True

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_data['pending_contest']

        except Exception as e:
            logging.error(f"Error saving to database: {e}", exc_info=True)
            error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä—Å–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            await update_or_send_message(update, context, error_message)
    elif user_data.get('contest_saved', False):
        logging.info("Contest already saved, skipping.")
    else:
        logging.error(f"Missing data in pending_contest: {pending_contest}")
        error_message = "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        await update_or_send_message(update, context, error_message)

    return WAITING_INPUT


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤
async def show_pending_contests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    pending_contests = await get_pending_contests(user_id)

    if not pending_contests:
        message = "–£ –≤–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤."
    else:
        message = "–û–∂–∏–¥–∞—é—â–∏–µ –∫–æ–Ω–∫—É—Ä—Å—ã:\n\n"
        for contest in pending_contests:
            link = contest.get('link', '–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            date = contest.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            message += f"<a href='{link}'>{link}</a>\n–î–∞—Ç–∞: {date}\n\n"

    keyboard = [
        [InlineKeyboardButton("üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='show_active'),
         InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data='show_completed'),
         InlineKeyboardButton("üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ", callback_data='show_tracked')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh_pending')]
    ]

    is_admin = user_id in ADMIN_USERS
    keyboard = add_admin_buttons(keyboard, is_admin)

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )

    return WAITING_INPUT


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤
async def get_pending_contests():
    query = "SELECT link FROM contests.pending_contests"
    return await execute_query(query)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
async def transfer_to_main_db(update, context):
    query = update.callback_query
    await query.answer()

    if update.effective_user.id not in ADMIN_USERS:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.", disable_web_page_preview=True)
        return WAITING_INPUT

    contest_index = int(query.data.split('_')[-1]) - 1
    pending_contests = await get_pending_contests()

    if 0 <= contest_index < len(pending_contests):
        link = pending_contests[contest_index]['link']

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—É—Ä—Å–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã pending_contests
        get_pending_contest_query = "SELECT * FROM contests.pending_contests WHERE link = $1"
        pending_contest_data = await execute_query(get_pending_contest_query, (link,))

        if pending_contest_data:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—É—Ä—Å –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            add_query = """
            INSERT INTO contests.contests (link, date, dop_channels, status)
            VALUES ($1, $2, $3, '–ê–∫—Ç–∏–≤–µ–Ω')
            """
            await execute_query(add_query, (link, pending_contest_data[0]['date'], pending_contest_data[0]['dop_channels']))

            # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—É—Ä—Å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã pending_contests
            delete_query = "DELETE FROM contests.pending_contests WHERE link = $1"
            await execute_query(delete_query, (link,))

            await query.edit_message_text(f"–ö–æ–Ω–∫—É—Ä—Å {link} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.", disable_web_page_preview=True)
        else:
            await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—É—Ä—Å–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤.", disable_web_page_preview=True)
    else:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", disable_web_page_preview=True)

    return WAITING_INPUT

async def handle_add_later(update, context):
    query = update.callback_query
    user_data = context.user_data

    link = query.message.reply_to_message.text if query.message.reply_to_message else None
    if link:
        if 'pending_contest' not in user_data:
            user_data['pending_contest'] = {}
        user_data['pending_contest']['link'] = link
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞:")
        return AWAITING_DATE
    else:
        query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return START

async def handle_date_entry(update, context):
    text = update.message.text
    user_data = context.user_data

    if 'pending_contest' in user_data and 'link' in user_data['pending_contest']:
        user_data['pending_contest']['date'] = text
        return await ask_for_pending_dop_channels(update, context)
    else:
        update.message.reply_text("–û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ.")
        return AWAITING_DATE

def end_conversation(update, context):
    update.message.reply_text('Thank you, your contest has been saved.')
    return ConversationHandler.END

def main():
    application = Application.builder().token("1").build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            WAITING_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input),
                CallbackQueryHandler(handle_url_action, pattern='^(finish_contest|add_contest|track_contest|add_to_pending|cancel)$'),
                CallbackQueryHandler(additional_channels, pattern='^(yes|no)$'),
                CallbackQueryHandler(refresh_contests, pattern='^refresh_(–ê–∫—Ç–∏–≤–µ–Ω|–ó–∞–≤–µ—Ä—à–µ–Ω)$'),
                CallbackQueryHandler(handle_pagination, pattern=r'^page_(–ê–∫—Ç–∏–≤–µ–Ω|–ó–∞–≤–µ—Ä—à–µ–Ω)_\d+$'),
                CallbackQueryHandler(switch_contest_type, pattern='^show_(active|completed|tracked)$'),
                CallbackQueryHandler(show_contests, pattern='^show_all_contests$'),
                CallbackQueryHandler(finish_contest, pattern='^finish_contest$'),
                CallbackQueryHandler(delete_tracked_contest, pattern='^delete_tracked$'),
                CallbackQueryHandler(handle_delete_tracked, pattern=r'^delete_\d+$'),
                CallbackQueryHandler(handle_delete_tracked, pattern='^cancel_delete$'),
                CallbackQueryHandler(add_new_tracked_contest, pattern='^add_tracked$'),
                CallbackQueryHandler(show_pending_contests, pattern='^show_pending_contests$'),
                CallbackQueryHandler(transfer_to_main_db, pattern='^transfer_to_main_db_'),
                CallbackQueryHandler(handle_pending_dop_channels, pattern='^pending_(yes|no)$'),
            ],
            WAITING_FOR_TRACKED_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_tracked_date_input),
            ],
            ADDITIONAL_CHANNELS: [
                CallbackQueryHandler(additional_channels, pattern='^(yes|no)$'),
            ],
            CHANNELS_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, channels_input),
            ],
            CONFIRMATION: [
                CallbackQueryHandler(confirmation, pattern='^(confirm|cancel)$'),
            ],
            FINISH_CONTEST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, update_contest_status),
            ],
            WAITING_FOR_PENDING_DOP_CHANNELS: [  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_pending_dop_channels_input),
            ],
            START:
                [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_add_later),
            ],
            AWAITING_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date_entry)],
            END:
                [MessageHandler(filters.TEXT & ~filters.COMMAND, end_conversation)],
            WAITING_FOR_PENDING_DATE: [
                 MessageHandler(filters.TEXT & ~filters.COMMAND, handle_pending_date_input)
            ]
        },
        fallbacks=[CommandHandler('start', start)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
